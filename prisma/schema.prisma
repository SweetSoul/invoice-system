// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Address {
  id       Int       @id @default(autoincrement())
  street   String?
  city     String?
  postCode String?
  country  String?
  sender   Invoice[] @relation("Sender")
  client   Invoice[] @relation("Client")
}

model Invoice {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime
  paymentDue     DateTime?
  description    String?
  paymentTerms   Int?
  clientName     String?
  clientEmail    String?
  status         InvoiceStatus
  senderAddress  Address       @relation("Sender", fields: [senderAdressId], references: [id])
  senderAdressId Int
  clientAddress  Address?      @relation("Client", fields: [clientAdressId], references: [id])
  clientAdressId Int?
  items          InvoiceItem[]
  total          Float

  @@index([clientAdressId], name: "clientAdressId")
  @@index([senderAdressId], name: "senderAdressId")
}

model InvoiceItem {
  id       Int       @id @default(autoincrement())
  name     String
  quantity Int
  price    Float
  total    Float
  invoice  Invoice[]
}

enum InvoiceStatus {
  paid
  pending
  draft
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
